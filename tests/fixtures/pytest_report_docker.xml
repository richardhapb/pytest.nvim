<?xml version="1.0" encoding="utf-8"?>
<testsuites>
   <testsuite name="pytest" errors="0" failures="2" skipped="1" tests="5" time="2.271"
      timestamp="2025-04-09T23:22:06.778368+00:00" hostname="4b2fe98f8261">
      <testcase classname="apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware"
         name="test_memory_threshold" time="1.555" />
      <testcase classname="apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware"
         name="test_memory_usage_disabled" time="0.145">
         <failure
            message="AssertionError: Expected 'take_snapshot' to have been called once. Called 0 times.">self
            = &lt;apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware
            testMethod=test_memory_usage_disabled&gt;
            mocktake_snapshot = &lt;MagicMock name='take_snapshot' id='124665463417328'&gt;
            @patch('memory_usage.middlewares.AppMemoryProfiler.take_snapshot',
            return_value={'size_mb': 100})
            def test_memory_usage_disabled(self, mocktake_snapshot: MagicMock) -&gt; None:
            """Test that a memory usage snapshot is taken when MEMORY_USAGE is disabled."""

            # Stub the environment variables MEMORY_USAGE
            with self.settings(MEMORY_USAGE=False):
            self.client.get('/')

            # This function is not called.
            &gt; mocktake_snapshot.assert_called_once()
            apps/memory_usage/tests/test_middlewares.py:52:
            _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

            self = &lt;MagicMock name='take_snapshot' id='124665463417328'&gt;

            def assert_called_once(self):
            """assert that the mock was called only once.
            """
            if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
            % (self._mock_name or 'mock',
            self.call_count,
            self._calls_repr()))
            &gt; raise AssertionError(msg)
            E AssertionError: Expected 'take_snapshot' to have been called once. Called 0 times.
            /usr/local/lib/python3.12/unittest/mock.py:923: AssertionError</failure>
      </testcase>
      <testcase classname="apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware"
         name="test_memory_usage_enabled" time="0.140">
         <failure message="AssertionError: 2 != 1">self =
            &lt;apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware
            testMethod=test_memory_usage_enabled&gt;
            mocktake_snapshot = &lt;MagicMock name='take_snapshot' id='124665464267856'&gt;
            @patch('memory_usage.middlewares.AppMemoryProfiler.take_snapshot',
            return_value={'size_mb': 100})
            def test_memory_usage_enabled(self, mocktake_snapshot: MagicMock) -&gt; None:
            """Test that a memory usage snapshot is taken when MEMORY_USAGE is enabled."""

            # Stub the environment variables MEMORY_USAGE
            with self.settings(MEMORY_USAGE=True):
            self.client.get('/')

            # This function is called twice.
            &gt; self.assertEqual(mocktake_snapshot.call_count, 1)
            E AssertionError: 2 != 1

            apps/memory_usage/tests/test_middlewares.py:41: AssertionError</failure>
      </testcase>
      <testcase classname="apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware"
         name="test_memory_usage_no_env" time="0.140" />
      <testcase classname="apps.memory_usage.tests.test_middlewares.TestMemoryUsageMiddleware"
         name="test_save_interval" time="0.002">
         <skipped type="pytest.skip" message="unconditional skip">/usr/src/app/apps/memory_usage/tests/test_middlewares.py:54:
            unconditional skip</skipped>
      </testcase>
   </testsuite>
</testsuites>
