<?xml version="1.0" encoding="utf-8"?>
<testsuites>
   <testsuite name="pytest" errors="0" failures="2" skipped="0" tests="9" time="5.372"
      timestamp="2025-04-08T20:51:33.637544-04:00" hostname="richard-syzlab">
      <testcase classname="tests.test_utils" name="test_get_data" time="3.030" />
      <testcase classname="tests.test_utils" name="test_get_data_multiple" time="0.163">
         <failure message="assert 3 &lt; 0">def test_get_data_multiple():
            """
            Test multiple requests for data in a short period of time

            Simulate behavior in the graph when multiple requests are made
            """
            Alerts.reset_instance()

            now = datetime.datetime.now(pytz.UTC)
            since = int((now - datetime.timedelta(days=30)).timestamp()) * 1000
            until = int((now -
            datetime.timedelta(minutes=MINUTES_BETWEEN_UPDATES_FROM_API)).timestamp()) * 1000
            calls_when_request_to_server = 2

            # Side effect
            alerts_empty = Alerts()
            alerts_full = Alerts.new_instance(generate_alerts_data())

            # Reset data of Singleton class
            Alerts.reset_instance()

            with patch("utils.utils.Alerts") as mock_alerts, patch("utils.utils.requests.get") as
            mock_requests:
            mock_alerts.side_effect = [alerts_empty, alerts_full]

            alerts = utils.get_data(since, until)
            assert mock_alerts.call_count == calls_when_request_to_server
            mock_requests.assert_called_once()
            mock_requests.reset_mock()

            with patch("utils.utils.requests.get") as mock_requests:
            # Mock the http response: `Response`
            response_mock = mock_requests.return_value
            response_mock.json.return_value = {"alerts": generate_alerts_data()}

            for _ in range(4):
            alerts = utils.get_data(since, until)
            assert isinstance(alerts, Alerts)
            assert not alerts.is_empty
            &gt; assert alerts.data.shape[0] &lt; 0
            E assert 3 &lt; 0

            tests/test_utils.py:150: AssertionError</failure>
      </testcase>
      <testcase classname="tests.test_utils" name="test_get_data_concurrent" time="0.087" />
      <testcase classname="tests.test_utils" name="test_update_timezone" time="0.003" />
      <testcase classname="tests.test_utils" name="test_separate_coords" time="0.006" />
      <testcase classname="tests.test_utils" name="test_freq_nearby" time="0.007" />
      <testcase classname="tests.test_utils" name="test_hourly_group" time="0.030" />
      <testcase classname="tests.test_utils" name="test_daily_group" time="0.023" />
      <testcase classname="tests.test_utils" name="test_generate_aggregate_data" time="0.041">
         <failure
            message="AssertionError: assert not True&#10; +  where True = hasattr(                                   uuid  ...                           geometry\n0  16272ee8-9a60-4dea-a4b1-76a8281732d4  ...  POINT (-7835709.939 -2708222.708)\n1  3ed960c0-13e9-441d-baf9-7a27181c35a4  ...  POINT (-7836296.593 -2707541.801)\n2  f51a5fbc-1a4a-4a36-9c4e-b8c67598e1f3  ...  POINT (-7836074.399 -2698175.727)\n\n[3 rows x 17 columns], 'group')&#10; +    where                                    uuid  ...                           geometry\n0  16272ee8-9a60-4dea-a4b1-76a8281732d4  ...  POINT (-7835709.939 -2708222.708)\n1  3ed960c0-13e9-441d-baf9-7a27181c35a4  ...  POINT (-7836296.593 -2707541.801)\n2  f51a5fbc-1a4a-4a36-9c4e-b8c67598e1f3  ...  POINT (-7836074.399 -2698175.727)\n\n[3 rows x 17 columns] = &lt;analytics.alerts.Alerts object at 0x7fb938dfb020&gt;.data">def
            test_generate_aggregate_data():
            """
            Test the response of the API in /aggregate.
            Must be return aggregate data and group information.
            """
            df = generate_simple_alerts_data()
            n = len(df)

            curr_time = datetime.datetime.now()
            df["pub_millis"] = [curr_time] * n
            df3 = utils.generate_aggregate_data(df)

            assert len(df3.data), n

            &gt; assert not hasattr(df3.data, "group")
            E AssertionError: assert not True
            E + where True = hasattr( uuid ... geometry\n0 16272ee8-9a60-4dea-a4b1-76a8281732d4 ...
            POINT (-7835709.939 -2708222.708)\n1 3ed960c0-13e9-441d-baf9-7a27181c35a4 ... POINT
            (-7836296.593 -2707541.801)\n2 f51a5fbc-1a4a-4a36-9c4e-b8c67598e1f3 ... POINT
            (-7836074.399 -2698175.727)\n\n[3 rows x 17 columns], 'group')
            E + where uuid ... geometry\n0 16272ee8-9a60-4dea-a4b1-76a8281732d4 ... POINT
            (-7835709.939 -2708222.708)\n1 3ed960c0-13e9-441d-baf9-7a27181c35a4 ... POINT
            (-7836296.593 -2707541.801)\n2 f51a5fbc-1a4a-4a36-9c4e-b8c67598e1f3 ... POINT
            (-7836074.399 -2698175.727)\n\n[3 rows x 17 columns] = &lt;analytics.alerts.Alerts
            object at 0x7fb938dfb020&gt;.data

            tests/test_utils.py:275: AssertionError</failure>
      </testcase>
   </testsuite>
</testsuites>
